from argparse import ArgumentParser, Namespace, RawDescriptionHelpFormatter
import json
import os
import colorsys


class HyprSpace:
    def __init__(self) -> None:
        self.arg_parser()
        self.file = os.path.join(os.path.expanduser("~"), ".cache/hellwal/colors.json")
        self.result = os.path.join(
            os.path.expanduser("~"), ".config/vesktop/themes/hyprspace.theme.css"
        )
        self.theme = """
/**
 * @name DiscordRecolor (HyprSpace with Hellwal)
 * @description Generated by walsktop
 * @author ELEVATED
 */

@import url(https://mwittrien.github.io/BetterDiscordAddons/Themes/DiscordRecolor/DiscordRecolor.css);

:root {
	--settingsicons: 1; /* Use Settings Icons in User Settings */
	--font:	"Noto Sans", "GeistMono Nerd Font"; /* General Font */
	
	--accentcolor: $accent1;
	--accentcolor2: $accent2;
	--linkcolor: $link;
	--mentioncolor: $mention;
	--successcolor: $success;
	--warningcolor: $warning;
	--dangercolor: $danger;
	
	--textbrightest: $txt-brightest;
	--textbrighter: $txt-brighter;
	--textbright: $txt-bright;
	--textdark: $txt-dark;
	--textdarker: $txt-darker;
	--textdarkest: $txt-darkest;
	
	--backgroundaccent: $bg-accent;
	--backgroundprimary: $bg-primary;
	--backgroundsecondary: $bg-second;
	--backgroundsecondaryalt: $bg-secalt;
	--backgroundtertiary: $bg-tertiary;
	--backgroundfloating: $bg-float;
}
#app-mount .overlay_c0bea0 {
    background-color: rgb($bg-secalt);
}
#app-mount .overlay__486c9 {
    background-color: rgb($bg-second);
}
#app-mount .section__733e9 {
    background-color: rgb($bg-secalt);
}
#app-mount .redGlow__67645 {
    background-color: rgb($danger-bg);
}
        """
        pass

    def arg_parser(self) -> Namespace:
        parser = ArgumentParser(
            prog="walsktop",
            formatter_class=RawDescriptionHelpFormatter,
            usage="just run it, it should work (maybe)",
            description="""walcord is good, just not for me
this is a smaller script
just for hyprspace rice""",
            epilog="yee",
        )
        return parser.parse_args()

    def generator(self) -> None:
        theme = self.theme

        with open(self.file) as f:
            file = json.load(f)

        colors_hex = file["special"]
        colors_hex.update(file["colors"])

        colors_rgb = {}
        for key, value in colors_hex.items():
            colors_rgb[key] = self.hex_to_rgb(value)

        white = self.lighten(colors_rgb["foreground"], 0.2)

        # blurple = self.hex_to_rgb("#5865f2")
        # boostpink = self.hex_to_rgb("#ff73fa")
        linkcolor = self.hex_to_rgb("#00b0f4")
        success = self.hex_to_rgb("#3ba55c")
        danger = self.hex_to_rgb("#ff6505")
        mention = self.hex_to_rgb("#33E2FC")
        warning = self.hex_to_rgb("#faa61a")

        colors_mod = {
            "$bg-accent": "%d, %d, %d"
            % self.darken(colors_rgb["color6"], 0.35),  # 0.15
            "$bg-primary": "%d, %d, %d"
            % self.darken(colors_rgb["color5"], 0.25),  # 0.2
            "$bg-second": "%d, %d, %d"
            % self.darken(colors_rgb["color4"], 0.35),  # 0.18
            "$bg-secalt": "%d, %d, %d"
            % self.darken(colors_rgb["color4"], 0.45),  # 0.25
            "$bg-tertiary": "%d, %d, %d"
            % self.darken(colors_rgb["color2"], 0.3, True),  # 0.3
            "$bg-float": "%d, %d, %d" % colors_rgb["color1"],  # 0.05
            "$txt-brightest": "%d, %d, %d" % white,
            "$txt-brighter": "%d, %d, %d" % self.darken(white, 0.08),
            "$txt-bright": "%d, %d, %d" % self.darken(white, 0.16),
            "$txt-dark": "%d, %d, %d" % self.darken(white, 0.24),
            "$txt-darker": "%d, %d, %d" % self.darken(white, 0.32),
            "$txt-darkest": "%d, %d, %d" % self.darken(white, 0.4),
            "$accent1": "%d, %d, %d" % colors_rgb["color12"],
            "$accent2": "%d, %d, %d" % colors_rgb["color10"],
            "$link": "%d, %d, %d" % self.mix_rgb(white, linkcolor, 0.9),
            "$success": "%d, %d, %d" % self.mix_rgb(colors_rgb["color4"], success, 0.9),
            "$warning": "%d, %d, %d" % self.mix_rgb(colors_rgb["color4"], warning, 0.9),
            "$danger": "%d, %d, %d" % self.mix_rgb(colors_rgb["color4"], danger, 0.9),
            "$danger-bg": "%d, %d, %d"
            % self.mix_rgb(colors_rgb["color4"], danger, 0.9),
            "$mention": "%d, %d, %d" % self.mix_rgb(colors_rgb["color4"], mention, 0.9),
        }
        for key, value in colors_mod.items():
            theme = theme.replace(key, value)
        with open(self.result, "w", encoding="utf-8") as f:
            f.write(theme)

    def mix_rgb(self, color1: tuple, color2: tuple, value: float) -> tuple:
        irgb1 = self.irgb_to_frgb(color1)
        irgb2 = self.irgb_to_frgb(color2)
        hls1 = colorsys.rgb_to_hls(irgb1[0], irgb1[1], irgb1[2])
        hls2 = colorsys.rgb_to_hls(irgb2[0], irgb2[1], irgb2[2])
        hls_mix = (
            abs((hls1[0] * (1 - value)) - (hls2[0] * (0 + value))),
            ((hls1[1] * (1 - value)) + (hls2[1] * (0 + value))),
            ((hls1[2] * (1 - value)) + (hls2[2] * (0 + value))),
        )
        rgb_mix = colorsys.hls_to_rgb(hls_mix[0], hls_mix[1], hls_mix[2])
        mix = self.frgb_to_irgb(rgb_mix)

        # mix = (
        #     ((color1[0] * (1 - value)) + (color2[0] * (0 + value))) // 2,
        #     ((color1[1] * (1 - value)) + (color2[1] * (0 + value))) // 2,
        #     ((color1[2] * (1 - value)) + (color2[2] * (0 + value))) // 2,
        # )
        # mix = self.lighten(mix, 0.2)
        return mix

    def frgb_to_irgb(self, rgb: tuple) -> tuple:
        """convert float rgb to int rgb"""
        rgb = (round(rgb[0] * 255), round(rgb[1] * 255), round(rgb[2] * 255))
        return rgb

    def irgb_to_frgb(self, rgb: tuple) -> tuple:
        """convert int rgb to float rgb"""
        rgb = (rgb[0] / 255, rgb[1] / 255, rgb[2] / 255)
        return rgb

    def hex_to_rgb(self, hex: str) -> tuple:
        """convert hex to rgb"""
        hex = hex[1:]
        hex_l = [hex[0:2], hex[2:4], hex[4:]]
        rgb_l = (
            int(hex_l[0], 16),
            int(hex_l[1], 16),
            int(hex_l[2], 16),
        )
        return rgb_l

    def darken(self, rgb: tuple, offset: float, over: bool = False) -> tuple:
        """darker rgb via hls"""
        rgb = self.irgb_to_frgb(rgb)
        hls = colorsys.rgb_to_hls(rgb[0], rgb[1], rgb[2])
        if (hls[1] - offset) >= 0 or over is True:
            hls = (hls[0], hls[1] - offset, hls[2])
        else:
            hls = (hls[0], hls[1] - (offset / 2), hls[2])
        rgb_r = colorsys.hls_to_rgb(hls[0], hls[1], hls[2])
        rgb_r = self.frgb_to_irgb(rgb_r)
        return rgb_r

    def lighten(self, rgb: tuple, offset: float, over: bool = False) -> tuple:
        """lighten rgb via hls"""
        rgb = self.irgb_to_frgb(rgb)
        hls = colorsys.rgb_to_hls(rgb[0], rgb[1], rgb[2])
        if (hls[1] - offset) <= 1 or over is True:
            hls = (hls[0], hls[1] + offset, hls[2])
        rgb_r = colorsys.hls_to_rgb(hls[0], hls[1], hls[2])
        rgb_r = self.frgb_to_irgb(rgb_r)
        return rgb_r


if __name__ == "__main__":
    HyprSpace().generator()
